#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Modified Java CI with Maven
jobs:
  build:
    strategy:
      matrix:
        java:
        - 8
        - 17
        - 21
        - 22
        os:
        - windows-latest
        - macos-latest
        - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-build (${{ matrix.java }}, ${{ matrix.os }}).csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/shardingsphere-elasticjob/shardingsphere-elasticjob', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - name: Configure Git
      run: |-
        git config --global core.longpaths true
    - run: touch optcd-3.txt
    - uses: actions/checkout@v4
    - run: touch optcd-4.txt
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: ${{ matrix.java }}
        cache: maven
    - run: touch optcd-5.txt
    - name: Build with Maven in Windows
      run: |-
        ./mvnw --batch-mode --no-transfer-progress '-Dmaven.javadoc.skip=true' clean install -T1C
    - run: touch optcd-6.txt
    - name: Build with Maven in Linux or macOS
      run: |-
        ./mvnw --batch-mode --no-transfer-progress '-Dmaven.javadoc.skip=true' clean install -Pcheck -T1C
    - run: touch optcd-7.txt
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: '**/target/site/jacoco/jacoco.xml'
    - run: touch optcd-8.txt
    - name: Build Examples with Maven
      run: ./mvnw clean package -B -f examples/pom.xml -T1C
    - run: touch optcd-9.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-build (${{ matrix.java }}, ${{ matrix.os }})
        path: /home/runner/inotifywait-log-build (${{ matrix.java }}, ${{ matrix.os
          }}).csv
    name: build (${{ matrix.java }}, ${{ matrix.os }})
'on':
- push
- workflow_dispatch
